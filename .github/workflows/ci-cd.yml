name: CI-CD

on:
  push:
    branches: ["master"]

env:
  NODE_VERSION: 20.15.1
  IMAGE_BACKEND: ferdinandes/carteado-backend
  IMAGE_FRONTEND: ferdinandes/carteado-frontend
  GCP_ZONE: us-central1-c
  GCP_INSTANCE_NAME: carteado-app
  DEPLOY_PATH: /home/franmlfran/deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install (workspaces)
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Derive image tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
            ${{ env.IMAGE_BACKEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
            ${{ env.IMAGE_FRONTEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

      - name: Create deploy directory on VM
        run: gcloud compute ssh ${{ env.GCP_INSTANCE_NAME }} --zone ${{ env.GCP_ZONE }} --command="mkdir -p ${{ env.DEPLOY_PATH }}"

      - name: Upload deployment files
        run: |
          gcloud compute scp --recurse docker-compose-prod.yml mongodb_rs nginx franmlfran@${{ env.GCP_INSTANCE_NAME }}:${{ env.DEPLOY_PATH }} --zone ${{ env.GCP_ZONE }}

      - name: Deploy services on VM
        run: |
          gcloud compute ssh ${{ env.GCP_INSTANCE_NAME }} --zone ${{ env.GCP_ZONE }} -- << EOF
            set -e
            cd ${{ env.DEPLOY_PATH }}
            
            echo "Updating services..."
            docker compose -f docker-compose-prod.yml pull
            
            # Exporta as variÃ¡veis de ambiente antes de rodar o compose
            export GOOGLE_ID='${{ secrets.GOOGLE_ID }}'
            export GOOGLE_SECRET='${{ secrets.GOOGLE_SECRET }}'
            export NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}'
            
            docker compose -f docker-compose-prod.yml up -d --remove-orphans
            
            echo "Cleaning up old images..."
            docker image prune -af
          EOF
