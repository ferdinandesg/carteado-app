name: CI-CD

on:
  push:
    branches: ["master"]

env:
  NODE_VERSION: 20.15.1
  IMAGE_BACKEND: ferdinandes/carteado-backend
  IMAGE_FRONTEND: ferdinandes/carteado-frontend
  GCP_ZONE: us-central1-c
  GCP_INSTANCE_NAME: carteado-app
  DEPLOY_USER: franmlfran
  DEPLOY_PATH: /home/franmlfran

jobs:
  # --- Novo Job: Detecta alterações nos diretórios ---
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      deploy: ${{ steps.filter.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  # --- Job 1: Instalação e Testes Iniciais (sempre roda) ---
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node and Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint project
        run: npm run lint

  # --- Job 2: Build do Backend (Roda apenas se houver alterações) ---
  build-backend:
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.backend == 'true'
    environment: production
    permissions:
      contents: "read"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Derive image tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
            ${{ env.IMAGE_BACKEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    needs: [setup, changes]
    if: needs.changes.outputs.frontend == 'true'
    environment: production
    permissions:
      contents: "read"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Derive image tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
            ${{ env.IMAGE_FRONTEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

  # --- Job 4: Deploy (Só roda se algum build tiver sido executado) ---
  deploy:
    runs-on: ubuntu-latest
    needs: [changes, build-backend, build-frontend]
    environment: production
    if: always() && needs.build-backend.result != 'failure' && needs.build-frontend.result != 'failure'
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      - name: Deploy to VM
        run: |
          # Copia a pasta de deploy para a VM
          gcloud compute scp --recurse ./deploy/ ${{ env.DEPLOY_USER }}@${{ env.GCP_INSTANCE_NAME }}:${{ env.DEPLOY_PATH }} --zone ${{ env.GCP_ZONE }}

          # Executa os comandos de deploy na VM via SSH
          gcloud compute ssh ${{ env.DEPLOY_USER }}@${{ env.GCP_INSTANCE_NAME }} --zone ${{ env.GCP_ZONE }} -- << EOF
            set -e

            echo "### 1. Instalando/Atualizando o Google Cloud Ops Agent..."
            curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh && sudo bash add-google-cloud-ops-agent-repo.sh --also-install

            echo "### 2. Aplicando a configuração do Ops Agent..."
            sudo cp ${{ env.DEPLOY_PATH }}/deploy/ops-agent.yaml /etc/google-cloud-ops-agent/config.yaml
            sudo systemctl restart google-cloud-ops-agent
            
            echo "### 3. Navegando para a pasta de deploy..."
            cd ${{ env.DEPLOY_PATH }}/deploy
            
            echo "### 4. Autenticando no Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            echo "### 5. Puxando as imagens mais recentes..."
            docker compose -f docker-compose-prod.yml pull
            
            echo "### 6. Parando e subindo a aplicação..."
            export GOOGLE_ID='${{ secrets.GOOGLE_ID }}'
            export GOOGLE_SECRET='${{ secrets.GOOGLE_SECRET }}'
            export NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}'
            export DATABASE_URL='${{ secrets.DATABASE_URL }}'
            export JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}'
            # O .env no servidor fornecerá as variáveis
            docker compose -f docker-compose-prod.yml down -v --remove-orphans
            docker compose -f docker-compose-prod.yml up -d
            
            echo "### 7. Limpando imagens Docker antigas e não utilizadas..."
            docker image prune -af
            
            echo ">>> DEPLOY CONCLUÍDO COM SUCESSO! <<<"
          EOF
