name: CI-CD

on:
  push:
    branches: ["master"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 21.1.0
          cache: "npm"

      - name: Install Dependencies (Root)
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci
          cd ..

      - name: Lint + Test Backend
        run: |
          cd backend
          npm run lint

      - name: Lint + Test Frontend
        run: |
          cd frontend
          npm run lint

      - name: Build Docker images
        run: |
          TAG=$(echo "${GITHUB_SHA::7}" | tr -d '[:space:]')
          echo "TAG=$TAG" >> $GITHUB_ENV
          docker build -f backend/Dockerfile.prod -t ferdinandes/carteado-backend:$TAG -t ferdinandes/carteado-backend:latest .
          docker build -f frontend/Dockerfile.prod -t ferdinandes/carteado-frontend:$TAG -t ferdinandes/carteado-frontend:latest .

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push images
        run: |
          docker push ferdinandes/carteado-backend:${{ env.TAG }}
          docker push ferdinandes/carteado-backend:latest
          docker push ferdinandes/carteado-frontend:${{ env.TAG }}
          docker push ferdinandes/carteado-frontend:latest

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 34.67.161.188 >> ~/.ssh/known_hosts

      - name: Debug SSH Key
        run: |
          ls -la ~/.ssh/
          cat ~/.ssh/id_rsa | head -n 5
          ssh -v -i ~/.ssh/id_rsa franmlfran@34.67.161.188 echo "SSH connection successful"

      - name: Test SSH Connection
        run: |
          ssh -v -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa franmlfran@34.67.161.188 "echo 'SSH connection successful'"

      - name: Upload project files to VM
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose-prod.yml franmlfran@34.67.161.188:/home/franmlfran/deploy/
          scp -i ~/.ssh/id_rsa -r docker-compose-prod.yml init-mongo.js nginx/ franmlfran@34.67.161.188:/home/franmlfran/deploy/

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa franmlfran@34.67.161.188 << 'EOF'
            mkdir -p /home/franmlfran/deploy
            cd /home/franmlfran/deploy
            echo "Atualizando serviços..."
            docker-compose -f docker-compose-prod.yml pull
            GOOGLE_ID=${{ secrets.GOOGLE_ID }} \
            GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} \
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
            docker-compose -f docker-compose-prod.yml up -d nginx frontend backend
            docker system prune -af # Limpa imagens antigas para liberar espaço
          EOF
