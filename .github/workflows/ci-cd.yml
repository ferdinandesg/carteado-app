name: CI-CD

on:
  push:
    branches: ["master"]

env:
  NODE_VERSION: 20.15.1
  IMAGE_BACKEND: ferdinandes/carteado-backend
  IMAGE_FRONTEND: ferdinandes/carteado-frontend
  GCP_ZONE: us-central1-c
  GCP_INSTANCE_NAME: carteado-app
  DEPLOY_USER: franmlfran
  DEPLOY_PATH: /home/franmlfran

jobs:
  # --- Job 1: Instalação e Testes Iniciais ---
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node and Cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint project
        run: npm run lint

      - name: Validate Nginx configuration
        run: |
          echo ">>> Creating temporary Nginx config for syntax validation..."
          # Cria um arquivo de configuração temporário com os blocos mínimos ('events')
          # e ajusta a sua configuração para o ambiente de teste.
          cat <<EOF > deploy/nginx/nginx.test.conf
          # Bloco obrigatório para o Nginx funcionar
          events {
              worker_connections 768;
          }
          # Envolve sua configuração em um bloco http
          http {
              $(sed -e 's/listen 443 ssl;/listen 443;/' \
                   -e '/ssl_certificate/s/^/#/' \
                   -e '/ssl_certificate_key/s/^/#/' \
                   -e '/ssl_dhparam/s/^/#/' \
                   -e '/include \/etc\/letsencrypt/s/^/#/' \
                   -e 's/http:\/\/frontend:3000/http:\/\/127.0.0.1:3000/' \
                   -e 's/http:\/\/backend:3333/http:\/\/127.0.0.1:3333/' \
                   deploy/nginx/nginx.conf)
          }
          EOF

          echo ">>> Validating Nginx syntax..."
          # Monta o arquivo de teste como a configuração principal do Nginx e valida a sintaxe
          docker run --rm -v ${{ github.workspace }}/deploy/nginx/nginx.test.conf:/etc/nginx/nginx.conf:ro nginx:stable-alpine nginx -t

          echo ">>> Nginx syntax is valid!"

  # --- Job 2: Build do Backend (Roda em paralelo com o build do Frontend) ---
  build-backend:
    runs-on: ubuntu-latest
    needs: setup # Depende do sucesso do job 'setup'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Derive image tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
            ${{ env.IMAGE_BACKEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

  # --- Job 3: Build do Frontend (Roda em paralelo com o build do Backend) ---
  build-frontend:
    runs-on: ubuntu-latest
    needs: setup # Depende do sucesso do job 'setup'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Derive image tag
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
            ${{ env.IMAGE_FRONTEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

  # --- Job 4: Deploy (Só roda se os dois builds forem bem-sucedidos) ---
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend] # Depende dos dois jobs de build
    environment: production
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to VM
        run: |
          gcloud compute scp --recurse ./deploy/ ${{ env.DEPLOY_USER }}@${{ env.GCP_INSTANCE_NAME }}:${{ env.DEPLOY_PATH }} --zone ${{ env.GCP_ZONE }}

          gcloud compute ssh ${{ env.DEPLOY_USER }}@${{ env.GCP_INSTANCE_NAME }} --zone ${{ env.GCP_ZONE }} -- << EOF
            set -e
            cd ${{ env.DEPLOY_PATH }}/deploy

            echo "### 1. Parando e removendo qualquer aplicação antiga..."
            docker compose -f docker-compose-prod.yml down -v --remove-orphans

            echo "### 2. Tornando script de SSL executável..."
            chmod +x init-letsencrypt.sh

            echo "### 3. Configurando SSL (apenas se necessário)..."
            ./init-letsencrypt.sh

            echo "### 4. Autenticando no Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "### 4. Puxando as imagens mais recentes..."
            docker compose -f docker-compose-prod.yml pull

            echo "### 5. Iniciando a aplicação do zero..."
            export GOOGLE_ID='${{ secrets.GOOGLE_ID }}'
            export GOOGLE_SECRET='${{ secrets.GOOGLE_SECRET }}'
            export NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}'
            export DATABASE_URL='${{ secrets.DATABASE_URL }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            
            docker compose -f docker-compose-prod.yml up -d

            echo "### 6. Limpando imagens Docker antigas e não utilizadas..."
            docker image prune -af

            echo ">>> DEPLOY CONCLUÍDO COM SUCESSO! <<<"
          EOF
