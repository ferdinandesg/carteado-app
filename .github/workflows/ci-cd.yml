name: CI-CD

on:
  push:
    branches: ["master"]

env:
  NODE_VERSION: 20.15.1
  IMAGE_BACKEND: ferdinandes/carteado-backend
  IMAGE_FRONTEND: ferdinandes/carteado-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install (workspaces)
        run: npm ci

      - name: Lint
        run: npm run lint

      # - name: Test
      #   run: npm test

      - name: Derive image tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
            ${{ env.IMAGE_BACKEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_BACKEND }}:buildcache,mode=max

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile.prod
          push: true
          tags: |
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
            ${{ env.IMAGE_FRONTEND }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_FRONTEND }}:buildcache,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 34.69.64.98 >> ~/.ssh/known_hosts

      - name: Upload deployment files
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose-prod.yml franmlfran@34.69.64.98:/home/franmlfran/deploy/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r mongodb_rs nginx franmlfran@34.69.64.98:/home/franmlfran/deploy/

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa franmlfran@34.69.64.98 <<'EOF'
            set -e
            mkdir -p /home/franmlfran/deploy
            cd /home/franmlfran/deploy
            echo "Updating services..."
            docker compose -f docker-compose-prod.yml pull
            GOOGLE_ID='${{ secrets.GOOGLE_ID }}' \
            GOOGLE_SECRET='${{ secrets.GOOGLE_SECRET }}' \
            NEXTAUTH_SECRET='${{ secrets.NEXTAUTH_SECRET }}' \
            docker compose -f docker-compose-prod.yml up -d nginx frontend backend
            docker image prune -f --filter dangling=true
          EOF
