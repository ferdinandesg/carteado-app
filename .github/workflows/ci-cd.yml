name: CI-CD

on:
  push:
    branches: ["master"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SSH_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 21.1.0
          cache: "npm"

      - name: Install Dependencies (Root)
        run: npm ci

      - name: Lint + Test Backend
        run: |
          cd backend
          npm run lint

      - name: Debugging Paths
        run: |
          ls -la frontend/
          npx eslint -v

      - name: Lint + Test Frontend
        run: |
          cd frontend
          export DEBUG=eslint:*
          NODE_PATH=$(npm root)
          npm run lint

      - name: Build Docker images
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          docker build -f backend/Dockerfile.prod -t ferdinandes/carteado-backend:$TAG -t ferdinandes/carteado-backend:latest .
          docker build -f frontend/Dockerfile.prod -t ferdinandes/carteado-frontend:$TAG -t ferdinandes/carteado-frontend:latest .

      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push images
        run: |
          docker push ferdinandes/carteado-backend:$TAG
          docker push ferdinandes/carteado-backend:latest
          docker push ferdinandes/carteado-frontend:$TAG
          docker push ferdinandes/carteado-frontend:latest

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 35.231.34.215 >> ~/.ssh/known_hosts

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@35.231.34.215 << 'EOF'
            cd ~/deploy
            echo "Atualizando serviços..."
            docker-compose -f docker-compose-prod.yml pull  # Puxa imagens mais recentes
            docker-compose -f docker-compose-prod.yml down  # Para os containers atuais
            docker-compose -f docker-compose-prod.yml up -d  # Reinicia com as novas imagens
            docker system prune -af  # Limpa imagens antigas para liberar espaço
          EOF
