$card-width: 100px;
$card-border: 1px solid black;
$card-border-radius: 5px;
$hover-scale: 1.5;
$hover-offset-y: -20px;
$card-count: 15; // Define o número total de cartas

// Gera posições dinamicamente para evitar repetição manual
$card-positions: ();
@for $i from 1 through $card-count {
  $card-positions: append($card-positions, (0px, 0px, -10deg));
}

.centerDeck {
  top: 35%;
  left: 50%;
  display: flex;
  gap: 15px;
}

.wrap {
  margin: $spacing-m 0;
  display: flex;
  margin: auto 0;
  position: absolute;
  justify-content: center;
  .card {
    width: $card-width;
    position: relative;
    transition: transform 0.2s ease-in-out;

    @for $i from 1 through $card-count {
      $left: -($card-width - 20px) * $i;
      $top: 0px;

      // ✅ Lógica Condicional para a Rotação
      $rotate: 0; // Inicializa a variável

      // O seletor '&' refere-se ao .card atual no loop.
      // @at-root seleciona a partir da raiz do documento para encontrar o pai.
      @at-root .left & {
        $rotate: nth(nth($card-positions, $i), 3) + 16;
      }

      @at-root .right & {
        // Se o pai tiver a classe .fan-right...
        $rotate: nth(nth($card-positions, $i), 3);
      }

      // Aplica os estilos para a carta atual
      &:nth-child(#{$i}) {
        left: $left;
        top: $top;
        transform: translateY(0px) rotate($rotate);
      }

      // O hover continua funcionando com a rotação correta
      &.canHover:hover {
        z-index: 2;
        transform: translate(1px, $hover-offset-y) rotate($rotate) scale(1.1);
      }
    }
  }
}
