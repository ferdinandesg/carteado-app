// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  // output = "../node_modules/@prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  image  String
  email  String
  skin   String?  @default("8bit")
  Player Player[]
  rank   Int
  role   String?  @default("user")
  rooms  Room[]   @relation("owner")
}

model Player {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User?   @relation(fields: [userId], references: [id])
  userId      String? @db.ObjectId
  name        String
  hand        Card[] // Mão do jogador (privado)
  playedCards Card[] // Cartas que o jogador já baixou na sua área pessoal (visível para todos)
  image       String
  Room        Room?   @relation(fields: [roomId], references: [id])
  roomId      String? @db.ObjectId
  status      String?
  game        Game?   @relation(fields: [gameId], references: [id])
  gameId      String? @db.ObjectId
}

model Game {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  players Player[]
  status  String

  deck              CardData // Deck principal para comprar
  discardPile       Card[] // Monte de descarte (seu antigo "bunch")
  currentRoundCards Card[] // Cartas jogadas na rodada atual, no centro da mesa

  room       Room   @relation(fields: [roomId], references: [id])
  roomId     String @unique @db.ObjectId
  playerTurn String @db.ObjectId
}

model Room {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hash      String
  name      String
  status    String?  @default("open")
  password  String?
  rule      String?
  size      Int
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
  owner     User?    @relation("owner", fields: [ownerId], references: [id])
  ownerId   String?  @db.ObjectId
  game      Game?
  gameId    String?  @db.ObjectId
  Player    Player[]
}

type CardData {
  cards              Card[]
  numbertOfFullDecks Int
}

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  messages Message[]
  Room     Room[]
}

type Message {
  name      String
  message   String
  createdAt DateTime @default(now())
}

type Card {
  hidden         Boolean?
  suit           String
  rank           String
  value          Int
  secondaryValue Int?
  toString       String?
}
