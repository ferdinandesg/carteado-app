# backend/Dockerfile (exemplo de multi-stage build)

# 1) Etapa de build
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar apenas o package.json e package-lock.json antes
# para que o npm install seja feito numa camada cacheada
COPY package.json package-lock.json ./

# Instala dependências
RUN npm ci

# Copia o restante dos arquivos
COPY . .

# (Opcional) Se você compila TypeScript antes de rodar, faça:
# RUN npm run build

# 2) Etapa final (imagem de produção)
FROM node:18-alpine AS production

WORKDIR /app

# Copia a pasta node_modules pronta da etapa anterior
COPY --from=builder /app/node_modules ./node_modules

# Se houver build (dist), copie também:
# COPY --from=builder /app/dist ./dist

# Copia apenas os arquivos necessários para rodar (sem devDependencies)
COPY package.json package-lock.json ./
# Se você quiser limpar dependências dev, pode fazer:
# RUN npm ci --only=production
# (Mas dependendo do seu fluxo, pode copiar direto do builder se for só runtime)

# Copia o código fonte (ou a pasta dist, se estiver tudo transpilado)
COPY --from=builder /app ./

# Exemplo: uso de CMD em modo de produção
CMD ["npm", "start"]
