# Stage 1: Builder - Instala dependências e compila o código
FROM node:20-slim AS builder
ARG APP_VERSION

ENV NEXT_PUBLIC_APP_VERSION=$APP_VERSION
WORKDIR /app

# Copia os manifestos de pacotes e configurações de todo o workspace
COPY package.json ./
COPY package-lock.json ./
COPY tsconfig*.json ./

COPY backend/package.json ./backend/
COPY shared/package.json ./shared/
 
# Instala TODAS as dependências do workspace
RUN npm install

# Copia todo o código-fonte
COPY backend/ ./backend/
COPY shared/ ./shared/

# Executa o build de ambos os pacotes.
# O 'npm run build --workspace=backend' já executa o 'prisma generate',
# que agora irá gerar o binaryTarget para 'debian-openssl-3.0.x'
RUN npm run build --workspace=shared
RUN npm run build --workspace=backend

# --- Estágio 2: Runner (Produção) ---
FROM node:20-slim

# Instala o OpenSSL, uma dependência de tempo de execução para o Prisma,
# e limpa o cache para manter a imagem enxuta.
RUN apt-get update -y && \
    apt-get install -y openssl && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copia os artefatos compilados
COPY --from=builder /app/backend/dist ./backend/dist
COPY --from=builder /app/shared/dist ./shared/dist

# Copia o package.json do backend e instala APENAS as dependências de produção
COPY --from=builder /app/backend/package.json ./backend/package.json
RUN cd backend && npm install --omit=dev

# Copia o cliente Prisma
COPY --from=builder /app/node_modules/.prisma ./backend/node_modules/.prisma

# Copia o pacote 'shared' como uma dependência local
COPY --from=builder /app/node_modules/shared ./node_modules/shared

WORKDIR /app/backend
EXPOSE 4000
CMD ["node", "dist/index.js"]

